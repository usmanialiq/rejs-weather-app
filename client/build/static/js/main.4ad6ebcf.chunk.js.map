{"version":3,"sources":["components/sunny_progress_bar.gif","components/Loader.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loader","react_default","a","createElement","className","style","marginTop","src","imageURL","width","Component","WeatherCard","key","this","props","href","data-tip","linkTemp","linkMaxTemp","linkMinTemp","linkHumidity","linkHour","linkDay","textDecoration","color","dist_default","place","data-type","event","multiline","cardHeadDay","cardHeadDate","cardImage","alt","cardMaxTemp","cardMinTemp","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","isLoading","errors","_this2","setState","axios","get","then","response","catch","_this$state","message","components_Loader","map","item","i","components_WeatherCard","temp","maxTemp","minTemp","humidity","hour","day","date","icon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ad6ebcf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunny_progress_bar.2cb045b7.gif\";","/*\r\nAuthor: Usman Ali'\r\nEmail: usmanialiq@gmail.com\r\n*/\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport imageURL from './sunny_progress_bar.gif';\r\n\r\nclass Loader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{marginTop: 200}} >\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-8 text-center\">\r\n                        <img src={imageURL} style={{ width: 200}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loader;\r\n\r\n/*\r\nAuthor: Usman Ali'\r\nEmail: usmanialiq@gmail.com\r\n*/","/*\r\nAuthor: Usman Ali'\r\nEmail: usmanialiq@gmail.com\r\n*/\r\n\r\nimport React, { Component } from 'react'\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nclass WeatherCard extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-sm-3 col-md-3 col-lg-3\" key={this.props.key}>\r\n\r\n          <a \r\n            href=\"#\"\r\n            data-tip={'Temperature: ' + this.props.linkTemp + '°C' +\r\n                      '<br/>' +\r\n                      'Max Temperature: ' + this.props.linkMaxTemp + '°C' + \r\n                      '<br/>' +\r\n                      'Min Temperature: ' + this.props.linkMinTemp + '°C' +\r\n                      '<br/>' +\r\n                      'Humidity: ' + this.props.linkHumidity +\r\n                      '<br/>' +\r\n                      'Hour: ' + this.props.linkHour + \r\n                      '<br/>' +\r\n                      'Day: ' + this.props.linkDay} \r\n            style={{ textDecoration: 'none', color: 'black'}}>\r\n\r\n            <ReactTooltip \r\n              place=\"bottom\"\r\n              data-type=\"info\"\r\n              event=\"click\"\r\n              multiline={true}\r\n            />\r\n              <div className=\"card text-center mb-3\">\r\n                <div className=\"card-body\">\r\n                  <h4>{this.props.cardHeadDay} | <small>{this.props.cardHeadDate}</small></h4>\r\n                  <img style={{width: 80}} src={'http://openweathermap.org/img/w/' + this.props.cardImage + '.png'} alt={this.props.cardHeadDay} />\r\n                  <p><span className=\"lead red\">{this.props.cardMaxTemp}°C</span> - <span className=\"lead blue\">{this.props.cardMinTemp}°C</span></p>\r\n                </div>\r\n              </div>\r\n          \r\n          </a>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default WeatherCard;\r\n\r\n/*\r\nAuthor: Usman Ali'\r\nEmail: usmanialiq@gmail.com\r\n*/","/*\nAuthor: Usman Ali'\nEmail: usmanialiq@gmail.com\n*/\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\n// requiring the components\nimport Loader from './components/Loader';\nimport WeatherCard from './components/WeatherCard';\n\n// App Structure\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoading: false,\n      errors: null\n    }\n  }\n\n  // react lifecycle \n  componentDidMount() {\n\n    // Enables loading until data is fetched\n    this.setState({ isLoading: true });\n\n    // Fetching the data\n    axios\n      .get('/fetch')\n      .then(response => {\n        this.setState({ data: response.data, isLoading: false });\n      })\n      .catch(errors => this.setState({ errors, isLoading: false }));\n  }\n\n  \n  render() {\n    // little bit of destructuring\n    const { isLoading, errors } = this.state;\n\n    // Rendering errors\n    if(errors) {\n      return <p>{errors.message}</p>;\n    }\n\n    // Rendering the Loader\n    if(isLoading) {\n      return <Loader />;\n    }\n\n    // Rendering the App\n    return (\n      <div className=\"container mt-3\">\n\n        <div className=\"row\">\n\n          {this.state.data.map((item, i) => (\n              \n              <WeatherCard \n                key={i}\n                linkTemp={item.temp}\n                linkMaxTemp={item.maxTemp}\n                linkMinTemp={item.minTemp}\n                linkHumidity={item.humidity}\n                linkHour={item.hour}\n                linkDay={item.day}\n                cardHeadDay={item.day}\n                cardHeadDate={item.date}\n                cardImage={item.icon}\n                cardMinTemp={item.minTemp}\n                cardMaxTemp={item.maxTemp}\n              />\n          ))}\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\nAuthor: Usman Ali'\nEmail: usmanialiq@gmail.com\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}